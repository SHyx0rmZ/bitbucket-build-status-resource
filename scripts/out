#!/usr/bin/env python

import os
import sys
import json
from bitbucket import BitbucketException, BitbucketCloudDriver, BitbucketServerDriver, set_build_status
from concourse import ConcourseResource, print_error
from helper import json_pp, CommitHashFactory

config = json.loads(sys.stdin.read())
input = ConcourseResource(config)

debug = input.source('debug', False)

if debug:
    print_error("--DEBUG MODE--")

# Configuration vars
driver = input.source('driver', 'Bitbucket Server')

build_status = input.param('build_status', input.param('state'))
artifact_dir = "%s/%s" % (sys.argv[1], input.param('repository', input.param('repo')))

if driver == 'Bitbucket Server':
    driver = BitbucketServerDriver(config, debug)
elif driver == 'Bitbucket Cloud':
    driver = BitbucketCloudDriver(config, debug)
else:
    print_error("Invalid driver, must be: 'Bitbucket Server' or 'Bitbucket Cloud'")
    exit(1)


# The build status can only be one of three things
if build_status not in ['INPROGRESS', 'SUCCESSFUL', 'FAILED']:
    print_error("Invalid build status, must be: INPROGRESS, SUCCESSFUL, or FAILED")
    exit(1)

commit_hash = CommitHashFactory.create(artifact_dir)

if commit_hash is None:
    print_error('Cannot detect a repository')
    exit(1)

if debug:
    print_error("Commit: " + str(commit_hash))

if input.has_param('build_url_file'):
        with open(os.path.join(sys.argv[1], input.param('build_url_file')), "r") as fp:
            build_url = fp.readlines()[0]
else:
    if 'BUILD_PIPELINE_NAME' in os.environ:
        maybe_team = 'teams/{team}/'.format(team=os.environ['BUILD_TEAM_NAME']) if 'BUILD_TEAM_NAME' in os.environ else ''
        build_url = "{url}/{maybe_team}pipelines/{pipeline}/jobs/{jobname}/builds/{buildname}".format(
            url=os.environ['ATC_EXTERNAL_URL'],
            maybe_team=maybe_team,
            pipeline=os.environ['BUILD_PIPELINE_NAME'],
            jobname=os.environ['BUILD_JOB_NAME'],
            buildname=os.environ['BUILD_NAME'],
        )
    # one-off build
    else:
        build_url = '{url}/builds/{build}'.format(
            url=os.environ['ATC_EXTERNAL_URL'],
            build=os.environ['BUILD_ID']
        )

if debug:
    print_error(build_url)

if input.has_param('key'):
    key = input.param('key')
else:
    key = os.environ.get("BUILD_JOB_NAME", 'one-off-build-{0}'.format(os.environ['BUILD_ID']))

if input.has_param('name'):
    name = input.param('name')
else:
    name = os.environ.get("BUILD_NAME", 'One-off build #{0}'.format(os.environ['BUILD_ID']))

if input.has_param('description_file'):
    with open(os.path.join(sys.argv[1], input.param('description_file')), "r") as fp:
        description = fp.read()
else:
    description = "Concourse CI build, hijack as #{0}".format(os.environ["BUILD_ID"])

# Do the update.
try:
    set_build_status(
        commit_hash=commit_hash,
        build_status=build_status,
        key=key,
        name=name,
        url=build_url,
        description=description,
        debug=debug,
        driver=driver
    )

except BitbucketException as e:
    print_error(str(e))
    exit(1)

status = {"version": {"build_status": build_status}}

if debug:
    print_error("Returning to Concourse:\n" + json_pp(status))

print(json.dumps(status))
